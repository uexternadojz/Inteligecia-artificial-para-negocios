---
interface Requirement {
  text: string;
  completed?: boolean;
}

interface Example {
  profile: string;
  idea: string;
  tool: string;
  features: string[];
}

interface Props {
  title: string;
  description: string;
  timeLimit: number; // minutes
  requirements: string[];
  examples?: Example[];
}

const { title, description, timeLimit, requirements, examples = [] } = Astro.props as Props;
---

<article class="challenge-card panel-orbital">
  {/* Header with timer */}
  <header class="challenge-header">
    <div class="challenge-title-wrapper">
      <h2 class="challenge-title">{title}</h2>
      <p class="challenge-description">{description}</p>
    </div>
    <div class="challenge-timer" data-timer>
      <svg class="timer-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <div class="timer-content">
        <span class="timer-label">Tiempo lÃ­mite</span>
        <span class="timer-value">{timeLimit} min</span>
      </div>
    </div>
  </header>

  {/* Requirements checklist */}
  <div class="challenge-section">
    <h3 class="section-title">âœ“ Requisitos</h3>
    <ul class="requirements-list">
      {
        requirements.map((requirement, index) => (
          <li class="requirement-item" data-index={index}>
            <label class="requirement-checkbox">
              <input type="checkbox" />
              <span class="checkbox-custom" />
              <span class="requirement-text">{requirement}</span>
            </label>
          </li>
        ))
      }
    </ul>
    <div class="progress-bar">
      <div class="progress-fill" data-progress="0" />
      <span class="progress-text">
        <span data-completed>0</span> de {requirements.length} completados
      </span>
    </div>
  </div>

  {/* Examples */}
  {
    examples.length > 0 && (
      <details class="challenge-examples">
        <summary class="examples-toggle">
          <span>ðŸ’¡ Ver Ejemplos ({examples.length})</span>
          <svg class="examples-toggle-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
          </svg>
        </summary>
        <div class="examples-content">
          {examples.map((example) => (
            <div class="example-card">
              <div class="example-header">
                <span class="example-profile">{example.profile}</span>
                <span class="example-tool">{example.tool}</span>
              </div>
              <p class="example-idea"><strong>Idea:</strong> {example.idea}</p>
              <div class="example-features">
                <span class="features-label">Funcionalidades:</span>
                <ul class="features-list">
                  {example.features.map((feature) => (
                    <li>{feature}</li>
                  ))}
                </ul>
              </div>
            </div>
          ))}
        </div>
      </details>
    )
  }

  {/* CTA */}
  <div class="challenge-actions">
    <button class="challenge-button challenge-button-primary" data-start-timer>
      <svg class="button-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      Iniciar DesafÃ­o
    </button>
    <button class="challenge-button challenge-button-secondary">
      <svg class="button-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
      </svg>
      Entregar Trabajo
    </button>
  </div>
</article>

<style>
  .challenge-card {
    padding: 2.5rem;
    border-radius: 1.5rem;
    border-width: 2px;
    border-color: rgba(237, 32, 36, 0.3);
    box-shadow: 0 0 50px rgba(237, 32, 36, 0.2);
  }

  .challenge-header {
    display: grid;
    gap: 2rem;
    margin-bottom: 2rem;
    padding-bottom: 2rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
  }

  @media (min-width: 768px) {
    .challenge-header {
      grid-template-columns: 1fr auto;
      align-items: start;
    }
  }

  .challenge-title {
    font-family: "Rajdhani", sans-serif;
    font-size: 2rem;
    font-weight: 700;
    color: white;
    margin: 0 0 0.75rem 0;
  }

  .challenge-description {
    font-size: 1.0625rem;
    line-height: 1.7;
    color: rgba(203, 213, 225, 0.85);
    margin: 0;
  }

  .challenge-timer {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1.5rem;
    background: rgba(237, 32, 36, 0.1);
    border: 2px solid rgba(237, 32, 36, 0.3);
    border-radius: 1rem;
    min-width: 200px;
  }

  .timer-icon {
    width: 36px;
    height: 36px;
    color: #ED2024;
    flex-shrink: 0;
  }

  .timer-content {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .timer-label {
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: rgba(203, 213, 225, 0.6);
  }

  .timer-value {
    font-family: "Rajdhani", sans-serif;
    font-size: 1.75rem;
    font-weight: 700;
    color: #ED2024;
    line-height: 1;
  }

  .challenge-section {
    margin-bottom: 2rem;
  }

  .section-title {
    font-family: "Rajdhani", sans-serif;
    font-size: 1.5rem;
    font-weight: 700;
    color: white;
    margin-bottom: 1rem;
  }

  .requirements-list {
    list-style: none;
    padding: 0;
    margin: 0 0 1.5rem 0;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .requirement-item {
    animation: fadeInUp 0.4s ease-out backwards;
  }

  .requirement-item[data-index="0"] { animation-delay: 0.1s; }
  .requirement-item[data-index="1"] { animation-delay: 0.15s; }
  .requirement-item[data-index="2"] { animation-delay: 0.2s; }
  .requirement-item[data-index="3"] { animation-delay: 0.25s; }
  .requirement-item[data-index="4"] { animation-delay: 0.3s; }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .requirement-checkbox {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.05);
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .requirement-checkbox:hover {
    background: rgba(255, 255, 255, 0.05);
    border-color: rgba(237, 32, 36, 0.3);
  }

  .requirement-checkbox input[type="checkbox"] {
    position: absolute;
    opacity: 0;
    width: 0;
    height: 0;
  }

  .checkbox-custom {
    width: 24px;
    height: 24px;
    flex-shrink: 0;
    border: 2px solid rgba(203, 213, 225, 0.3);
    border-radius: 6px;
    position: relative;
    transition: all 0.2s;
  }

  .requirement-checkbox input[type="checkbox"]:checked + .checkbox-custom {
    background: #ED2024;
    border-color: #ED2024;
  }

  .requirement-checkbox input[type="checkbox"]:checked + .checkbox-custom::after {
    content: "âœ“";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: white;
    font-weight: 700;
    font-size: 14px;
  }

  .requirement-text {
    font-size: 0.9375rem;
    line-height: 1.6;
    color: rgba(203, 213, 225, 0.85);
  }

  .requirement-checkbox input[type="checkbox"]:checked ~ .requirement-text {
    text-decoration: line-through;
    color: rgba(203, 213, 225, 0.5);
  }

  .progress-bar {
    position: relative;
    height: 12px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 6px;
    overflow: hidden;
    margin-bottom: 0.5rem;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #ED2024, #ff3438);
    border-radius: 6px;
    transition: width 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 0 20px rgba(237, 32, 36, 0.5);
  }

  .progress-text {
    font-size: 0.875rem;
    color: rgba(203, 213, 225, 0.7);
  }

  .challenge-examples {
    margin-bottom: 2rem;
  }

  .examples-toggle {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem 1.5rem;
    background: rgba(0, 188, 212, 0.05);
    border: 1px solid rgba(0, 188, 212, 0.2);
    border-radius: 12px;
    cursor: pointer;
    list-style: none;
    font-size: 1rem;
    font-weight: 600;
    color: #00BCD4;
    transition: all 0.2s;
  }

  .examples-toggle:hover {
    background: rgba(0, 188, 212, 0.1);
    border-color: rgba(0, 188, 212, 0.4);
  }

  .examples-toggle::-webkit-details-marker {
    display: none;
  }

  .examples-toggle-icon {
    width: 20px;
    height: 20px;
    transition: transform 0.3s;
  }

  .challenge-examples[open] .examples-toggle-icon {
    transform: rotate(180deg);
  }

  .examples-content {
    padding: 1.5rem 0 0;
    display: grid;
    gap: 1rem;
    animation: slideDown 0.3s ease-out;
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .example-card {
    padding: 1.5rem;
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.05);
    border-radius: 12px;
  }

  .example-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 1rem;
    margin-bottom: 0.75rem;
  }

  .example-profile {
    font-weight: 600;
    color: white;
  }

  .example-tool {
    padding: 0.25rem 0.75rem;
    background: rgba(237, 32, 36, 0.2);
    border: 1px solid rgba(237, 32, 36, 0.3);
    border-radius: 6px;
    font-size: 0.8125rem;
    color: #ED2024;
  }

  .example-idea {
    font-size: 0.9375rem;
    line-height: 1.6;
    color: rgba(203, 213, 225, 0.85);
    margin-bottom: 1rem;
  }

  .features-label {
    font-size: 0.875rem;
    font-weight: 600;
    color: white;
    display: block;
    margin-bottom: 0.5rem;
  }

  .features-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 0.375rem;
  }

  .features-list li {
    font-size: 0.875rem;
    color: rgba(203, 213, 225, 0.75);
    padding-left: 1.25rem;
    position: relative;
  }

  .features-list li::before {
    content: "â†’";
    position: absolute;
    left: 0;
    color: #00BCD4;
  }

  .challenge-actions {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .challenge-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem 2rem;
    border-radius: 12px;
    font-size: 1rem;
    font-weight: 600;
    text-decoration: none;
    transition: all 0.3s;
    border: none;
    cursor: pointer;
    flex: 1;
    justify-content: center;
  }

  @media (max-width: 640px) {
    .challenge-button {
      width: 100%;
    }
  }

  .challenge-button-primary {
    background: linear-gradient(135deg, #ED2024, #b31619);
    color: white;
    box-shadow: 0 0 30px rgba(237, 32, 36, 0.4);
  }

  .challenge-button-primary:hover {
    background: linear-gradient(135deg, #ff2428, #ED2024);
    box-shadow: 0 0 45px rgba(237, 32, 36, 0.6);
    transform: translateY(-2px);
  }

  .challenge-button-secondary {
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: rgba(255, 255, 255, 0.9);
  }

  .challenge-button-secondary:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(0, 188, 212, 0.5);
    color: white;
    transform: translateY(-2px);
  }

  .button-icon {
    width: 20px;
    height: 20px;
  }

  @media (max-width: 768px) {
    .challenge-card {
      padding: 1.5rem;
    }

    .challenge-title {
      font-size: 1.5rem;
    }

    .challenge-timer {
      width: 100%;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .requirement-item {
      animation: none;
    }

    .examples-content {
      animation: none;
    }

    .progress-fill {
      transition: none;
    }

    .challenge-button:hover {
      transform: none;
    }
  }
</style>

<script>
  // Update progress when checkboxes are clicked
  const checkboxes = document.querySelectorAll('.requirement-checkbox input[type="checkbox"]');
  const progressFill = document.querySelector("[data-progress]") as HTMLElement;
  const completedSpan = document.querySelector("[data-completed]") as HTMLElement;
  const total = checkboxes.length;

  function updateProgress() {
    const completed = Array.from(checkboxes).filter((cb: Element) => (cb as HTMLInputElement).checked).length;
    const percentage = (completed / total) * 100;

    if (progressFill) {
      progressFill.style.width = `${percentage}%`;
    }
    if (completedSpan) {
      completedSpan.textContent = String(completed);
    }
  }

  checkboxes.forEach((checkbox) => {
    checkbox.addEventListener("change", updateProgress);
  });

  // Timer functionality (placeholder)
  const startButton = document.querySelector("[data-start-timer]");
  if (startButton) {
    startButton.addEventListener("click", () => {
      alert("Timer functionality coming soon!");
      // TODO: Implement countdown timer
    });
  }
</script>
