---
interface ComparisonDimension {
  name: string;
  description: string;
  tools: {
    name: string;
    score: number;
    label?: string;
  }[];
}

interface Props {
  dimensions: ComparisonDimension[];
}

const { dimensions } = Astro.props as Props;
---

<section class="comparison-matrix">
  {
    dimensions.map((dimension, dimIndex) => (
      <article class="dimension-card panel-orbital" data-dimension={dimIndex}>
        {/* Header */}
        <header class="dimension-header">
          <h3 class="dimension-title">{dimension.name}</h3>
          <p class="dimension-description">{dimension.description}</p>
        </header>

        {/* Bars */}
        <div class="dimension-bars">
          {dimension.tools.map((tool, toolIndex) => (
            <div class="tool-bar-wrapper" data-tool={toolIndex}>
              <div class="tool-bar-info">
                <span class="tool-bar-name">{tool.name}</span>
                {tool.label && (
                  <span class="tool-bar-label">{tool.label}</span>
                )}
              </div>
              <div class="tool-bar-track">
                <div
                  class="tool-bar-fill"
                  style={`width: ${(tool.score / 10) * 100}%`}
                  data-score={tool.score}
                >
                  <span class="tool-bar-score">{tool.score}/10</span>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Index indicator */}
        <div class="dimension-index" aria-hidden="true">
          {String(dimIndex + 1).padStart(2, "0")}
        </div>
      </article>
    ))
  }
</section>

<style>
  .comparison-matrix {
    display: grid;
    gap: 2rem;
    margin: 2rem 0;
  }

  @media (min-width: 1024px) {
    .comparison-matrix {
      grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    }
  }

  .dimension-card {
    padding: 2rem;
    border-radius: 1.5rem;
    position: relative;
    animation: fadeInUp 0.6s ease-out backwards;
  }

  .dimension-card[data-dimension="0"] { animation-delay: 0.1s; }
  .dimension-card[data-dimension="1"] { animation-delay: 0.2s; }
  .dimension-card[data-dimension="2"] { animation-delay: 0.3s; }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .dimension-header {
    margin-bottom: 1.5rem;
  }

  .dimension-title {
    font-family: "Rajdhani", sans-serif;
    font-size: 1.75rem;
    font-weight: 700;
    color: white;
    margin-bottom: 0.5rem;
  }

  .dimension-description {
    font-size: 0.875rem;
    color: rgba(203, 213, 225, 0.7);
  }

  .dimension-bars {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .tool-bar-wrapper {
    animation: slideInLeft 0.5s ease-out backwards;
  }

  .tool-bar-wrapper[data-tool="0"] { animation-delay: 0.2s; }
  .tool-bar-wrapper[data-tool="1"] { animation-delay: 0.25s; }
  .tool-bar-wrapper[data-tool="2"] { animation-delay: 0.3s; }
  .tool-bar-wrapper[data-tool="3"] { animation-delay: 0.35s; }
  .tool-bar-wrapper[data-tool="4"] { animation-delay: 0.4s; }
  .tool-bar-wrapper[data-tool="5"] { animation-delay: 0.45s; }
  .tool-bar-wrapper[data-tool="6"] { animation-delay: 0.5s; }
  .tool-bar-wrapper[data-tool="7"] { animation-delay: 0.55s; }
  .tool-bar-wrapper[data-tool="8"] { animation-delay: 0.6s; }

  @keyframes slideInLeft {
    from {
      opacity: 0;
      transform: translateX(-30px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .tool-bar-info {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 0.5rem;
  }

  .tool-bar-name {
    font-size: 0.875rem;
    font-weight: 500;
    color: white;
  }

  .tool-bar-label {
    font-size: 0.75rem;
    color: rgba(203, 213, 225, 0.6);
    font-style: italic;
  }

  .tool-bar-track {
    position: relative;
    height: 32px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 8px;
    overflow: hidden;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .tool-bar-fill {
    position: relative;
    height: 100%;
    background: linear-gradient(
      90deg,
      rgba(237, 32, 36, 0.8),
      rgba(237, 32, 36, 0.4)
    );
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: flex-end;
    padding-right: 0.75rem;
    transition: width 1s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 0 20px rgba(237, 32, 36, 0.3);
  }

  .tool-bar-fill[data-score="10"],
  .tool-bar-fill[data-score="9"] {
    background: linear-gradient(
      90deg,
      rgba(16, 185, 129, 0.8),
      rgba(16, 185, 129, 0.4)
    );
    box-shadow: 0 0 20px rgba(16, 185, 129, 0.3);
  }

  .tool-bar-fill[data-score="8"],
  .tool-bar-fill[data-score="7"] {
    background: linear-gradient(
      90deg,
      rgba(0, 188, 212, 0.8),
      rgba(0, 188, 212, 0.4)
    );
    box-shadow: 0 0 20px rgba(0, 188, 212, 0.3);
  }

  .tool-bar-score {
    font-family: "Rajdhani", sans-serif;
    font-size: 0.875rem;
    font-weight: 700;
    color: white;
    text-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    white-space: nowrap;
  }

  .dimension-index {
    position: absolute;
    top: 1.5rem;
    right: 1.5rem;
    font-family: "Rajdhani", sans-serif;
    font-size: 4rem;
    font-weight: 700;
    color: rgba(237, 32, 36, 0.1);
    line-height: 1;
    pointer-events: none;
  }

  @media (max-width: 768px) {
    .dimension-card {
      padding: 1.5rem;
    }

    .dimension-title {
      font-size: 1.5rem;
    }

    .dimension-index {
      font-size: 3rem;
      top: 1rem;
      right: 1rem;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .dimension-card,
    .tool-bar-wrapper {
      animation: none;
    }

    .tool-bar-fill {
      transition: none;
    }
  }
</style>

<script>
  // Animate bars on intersection
  const observerOptions = {
    threshold: 0.3,
    rootMargin: "0px 0px -100px 0px",
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const bars = entry.target.querySelectorAll(".tool-bar-fill");
        bars.forEach((bar: Element) => {
          if (bar instanceof HTMLElement) {
            const targetWidth = bar.style.width;
            bar.style.width = "0%";
            setTimeout(() => {
              bar.style.width = targetWidth;
            }, 100);
          }
        });
        observer.unobserve(entry.target);
      }
    });
  }, observerOptions);

  document.querySelectorAll(".dimension-card").forEach((card) => {
    observer.observe(card);
  });
</script>
